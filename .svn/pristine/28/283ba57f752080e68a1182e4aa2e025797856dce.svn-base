from generic_line_hierarchy_generator import GenericLineHierarchy

from init_lh_builder import INIT_LH_BUILDER

from cryring_yrme_properties import CRYRING_YRME_PROPERTIES

from cryring_yrme_devices import CRYRING_YRME_DEVICES

class GENERATOR_CRYRING_YRME(GenericLineHierarchy, INIT_LH_BUILDER):
    
    def __init__(self):
        
        self.standalone_acczone = False
        if not hasattr(self, 'lh_builder'):
            self.standalone_acczone = True
            cryring_yrme_properties = CRYRING_YRME_PROPERTIES()
            INIT_LH_BUILDER.__init__(self, cryring_yrme_properties)
        
        CRYRING_device_groups = CRYRING_YRME_DEVICES()
        GenericLineHierarchy.__init__(self, CRYRING_device_groups)

        self.yrme_bp = True

    def __buildSpecial(self):
        # build special part of hierarchy for CRYRING

        for device in self.devices.cavities:
	    if (device == 'YRT1BR1'):
		    if self.standalone_acczone:
		      self.lh_builder.create_child_node(self.t_rf_pulse_parameter, [ device+'/T_PAUSE_PULSE_LENGTH' ] )
		      self.lh_builder.create_child_node(self.t_pulse_parameter, [ 'YRT1LC1_V/TCHOP' ] )

            	    self.lh_builder.create_child_node(self.element_parameter, [ 'YRLE_BEAM/ELEMENT' ] )
            	    self.lh_builder.create_child_node(self.isotope_parameter, [ 'YRLE_BEAM/ISOTOPE' ] )
            	    self.lh_builder.create_child_node(self.q_parameter, [ 'YRLE_BEAM/Q' ] )
            	    self.lh_builder.create_child_node(self.chopped_parameter, [ 'YRLE_BEAM/CHOPPED_BEAM' ] )

    def build(self):
        
        # build generic part of hierarchy
        GenericLineHierarchy.build(self)
        
        # build special part of hierarchy
        self.__buildSpecial()
        
        GenericLineHierarchy.generate_linkrules(self)

    def generate(self):
        self.lh_builder.export()

        

if __name__ == '__main__':
        
    h2 = GENERATOR_CRYRING_YRME()
    h2.build()
    h2.generate()
